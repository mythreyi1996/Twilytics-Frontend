{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17165\\\\Documents\\\\Sem1\\\\IR\\\\twilytics_frontend\\\\src\\\\components\\\\News.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Bar, Line, Pie, Doughnut } from 'react-chartjs-2';\nimport App from '../App';\nimport \"./Chart.css\";\nimport { GoogleMap, InfoWindow, Marker, withScriptjs, withGoogleMap } from \"react-google-maps\";\n\nclass Chart extends React.Component {\n  Map() {\n    return React.createElement(GoogleMap, {\n      defaultZoom: 2,\n      defaultCenter: {\n        lat: 32.7502,\n        lng: 114.7655\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: {},\n      location_chartData: {},\n      date_charData: {},\n      sentiment_chartData: {},\n      WrappedMap: {}\n    };\n\n    this.Processing = () => {\n      var lang_dict = {};\n      var loc_dict = {};\n      var sentiment_dict = {\n        \"positive\": 0,\n        \"negative\": 0,\n        \"neutral\": 1\n      };\n      var date_dict = {};\n\n      for (var i = 0; i < this.props.chartData.length; i++) {\n        var obj = this.props.chartData[i];\n\n        if (obj.lang in lang_dict) {\n          lang_dict[obj.lang] = lang_dict[obj.lang] + 1;\n        } else {\n          lang_dict[obj.lang] = 1;\n        }\n\n        if (obj[\"state\"] in loc_dict) {\n          loc_dict[obj[\"state\"]] = loc_dict[obj[\"state\"]] + 1;\n        } else {\n          loc_dict[obj[\"state\"]] = 1;\n        }\n\n        if (obj.sentiment in sentiment_dict) {\n          sentiment_dict[obj.sentiment] = sentiment_dict[obj.sentiment] + 1;\n        }\n\n        var date = String(obj.createdAt).split(\" \");\n        var monthDict = {\n          'Jan': 1,\n          'Feb': 2,\n          'Mar': 3,\n          'Apr': 4,\n          'May': 5,\n          'Jun': 6,\n          'Jul': 7,\n          'Aug': 8,\n          'Sep': 9,\n          'Oct': 10,\n          'Nov': 11,\n          'Dec': 12\n        };\n        var temp = date[5] + \"-\" + monthDict[String(date[1])] + \"-\" + date[2]; //var d = new Date(temp);\n\n        if (temp in date_dict) {\n          date_dict[temp] = date_dict[temp] + 1;\n        } else {\n          date_dict[temp] = 1;\n        }\n      }\n\n      var lang_keys = [];\n      var lang_values = [];\n      var loc_keys = [];\n      var loc_values = [];\n      var date_keys = [];\n      var date_values = [];\n      var sentiment_keys = [];\n      var sentiment_values = [];\n\n      for (var key in lang_dict) {\n        lang_keys.push(key);\n        lang_values.push(lang_dict[key]);\n      }\n\n      for (var key in loc_dict) {\n        loc_keys.push(key);\n        loc_values.push(loc_dict[key]);\n      }\n\n      for (var key in date_dict) {\n        date_keys.push(key);\n        date_values.push(date_dict[key]);\n      }\n\n      for (var key in sentiment_dict) {\n        sentiment_keys.push(key);\n        sentiment_values.push(sentiment_dict[key]);\n      }\n\n      this.setState({\n        chartData: {\n          labels: lang_keys,\n          datasets: [{\n            label: \"Language\",\n            data: lang_values,\n            backgroundColor: [\"#3e95cd\", \"#8e5ea2\", \"#3cba9f\", \"#e8c3b9\", \"#c45850\", \"#a8e0ff\"]\n          }]\n        }\n      });\n      this.setState({\n        location_chartData: {\n          labels: loc_keys,\n          datasets: [{\n            label: 'Location',\n            data: loc_values,\n            backgroundColor: ['#a8e0ff', '#8ee3f5', '#70cad1', '#3e517a', '#b08ea2', '#BBB6DF', '#3e95cd', '#8e5ea2', '#3cba9f', '#e8c3b9', '#c45850', '#a8e0ff']\n          }]\n        }\n      });\n      this.setState({\n        date_chartData: {\n          labels: date_keys,\n          datasets: [{\n            label: 'Time series',\n            data: date_values,\n            borderColor: \"#8e5ea2\",\n            fill: false,\n            backgroundColor: ['#a8e0ff']\n          }]\n        }\n      });\n      this.setState({\n        sentiment_chartData: {\n          labels: sentiment_keys,\n          datasets: [{\n            label: 'Sentiment Analysis',\n            data: sentiment_values,\n            borderColor: \"#8e5ea2\",\n            fill: false,\n            backgroundColor: ['#a8e0ff', '#b08ea2', '#BBB6DF']\n          }]\n        }\n      });\n    };\n\n    this.state = {\n      chartData: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({});\n    this.setState({\n      WrappedMap: withScriptjs(withGoogleMap(Map))\n    });\n  }\n\n  render() {\n    this.Processing();\n    const data = [{\n      \"name\": \"test1\"\n    }, {\n      \"name\": \"test2\"\n    }];\n    const listItems = data.map(d => React.createElement(\"li\", {\n      key: d.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, d.name));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, listItems);\n  }\n\n}\n\nChart.defaultProps = {\n  displayTitle: true,\n  displayLegend: true,\n  lengendPosition: 'right'\n};\nexport default News;","map":{"version":3,"sources":["C:/Users/17165/Documents/Sem1/IR/twilytics_frontend/src/components/News.js"],"names":["React","Component","ReactDOM","Bar","Line","Pie","Doughnut","App","GoogleMap","InfoWindow","Marker","withScriptjs","withGoogleMap","Chart","Map","lat","lng","constructor","props","state","chartData","location_chartData","date_charData","sentiment_chartData","WrappedMap","Processing","lang_dict","loc_dict","sentiment_dict","date_dict","i","length","obj","lang","sentiment","date","String","createdAt","split","monthDict","temp","lang_keys","lang_values","loc_keys","loc_values","date_keys","date_values","sentiment_keys","sentiment_values","key","push","setState","labels","datasets","label","data","backgroundColor","date_chartData","borderColor","fill","componentDidMount","render","listItems","map","d","name","defaultProps","displayTitle","displayLegend","lengendPosition","News"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Bar, Line, Pie, Doughnut} from 'react-chartjs-2';\r\nimport App from '../App';\r\nimport \"./Chart.css\";\r\nimport {GoogleMap, InfoWindow, Marker, withScriptjs, withGoogleMap} from \"react-google-maps\"\r\n\r\n\r\n\r\nclass Chart extends React.Component {\r\n    \r\n    state = {\r\n      chartData: {},\r\n      location_chartData: {},\r\n      date_charData: {},\r\n      sentiment_chartData : {},\r\n      WrappedMap: {}\r\n    };\r\n\r\n    Map() {\r\n        return( \r\n        <GoogleMap \r\n          defaultZoom = {2}\r\n          defaultCenter={{lat:32.7502, lng:114.7655}} \r\n        >\r\n        </GoogleMap>\r\n        );\r\n      }\r\n\r\n    static defaultProps = {\r\n        displayTitle:true,\r\n        displayLegend:true,\r\n        lengendPosition:'right'\r\n    }\r\n\r\n    constructor(props){\r\n\r\n        \r\n        super(props);\r\n        \r\n        this.state = {\r\n       chartData :{}\r\n                    }\r\n    }\r\n\r\n    componentDidMount() { \r\n        this.setState({})\r\n        this.setState({ WrappedMap : withScriptjs(withGoogleMap(Map))});\r\n    }\r\n\r\n    Processing =  () => {\r\n\r\n        \r\n        var lang_dict = {};\r\n\r\n        var loc_dict = {};\r\n\r\n        var sentiment_dict = {\r\n            \"positive\": 0,\r\n            \"negative\": 0,\r\n            \"neutral\": 1,\r\n        };\r\n\r\n        var date_dict = {};\r\n    \r\n        for(var i = 0; i < this.props.chartData.length; i++) {\r\n            var obj = this.props.chartData[i];\r\n\r\n            if (obj.lang in lang_dict){\r\n                lang_dict[obj.lang] = lang_dict[obj.lang] + 1;\r\n            }\r\n            else {\r\n                lang_dict[obj.lang] = 1;\r\n            }\r\n\r\n            if (obj[\"state\"] in loc_dict) {\r\n                loc_dict[obj[\"state\"]] = loc_dict[obj[\"state\"]] + 1;\r\n                }\r\n            else {\r\n                    loc_dict[obj[\"state\"]] = 1;\r\n                }\r\n            \r\n            if (obj.sentiment in sentiment_dict) {\r\n             sentiment_dict[obj.sentiment] = sentiment_dict[obj.sentiment] + 1;\r\n            }\r\n\r\n            var date = String(obj.createdAt).split(\" \");\r\n            var monthDict={'Jan':1, 'Feb':2, 'Mar':3, 'Apr':4, 'May':5, 'Jun':6, 'Jul':7, 'Aug':8, 'Sep':9, 'Oct':10, 'Nov':11, 'Dec':12};\r\n            var temp = date[5] + \"-\" + monthDict[String(date[1])] + \"-\" + date[2];\r\n            //var d = new Date(temp);\r\n\r\n            if (temp in  date_dict) {\r\n            date_dict[temp] = date_dict[temp] + 1;\r\n            }\r\n            else {\r\n            date_dict[temp] = 1;\r\n            }\r\n        }   \r\n\r\n        var lang_keys = []\r\n        var lang_values = []\r\n        var loc_keys = []\r\n        var loc_values = []\r\n        var date_keys = []\r\n        var date_values = []\r\n        var sentiment_keys = []\r\n        var sentiment_values = []\r\n\r\n        for(var key in lang_dict)  { \r\n            lang_keys.push( key );\r\n            lang_values.push(lang_dict[key]);\r\n        }\r\n\r\n        for(var key in loc_dict)  { \r\n            loc_keys.push( key );\r\n            loc_values.push(loc_dict[key]);\r\n        }\r\n\r\n        for(var key in date_dict)  { \r\n            date_keys.push( key );\r\n            date_values.push(date_dict[key]);\r\n        }\r\n\r\n        for(var key in sentiment_dict)  { \r\n            sentiment_keys.push( key );\r\n            sentiment_values.push(sentiment_dict[key]);\r\n        }\r\n\r\n    this.setState({\r\n        chartData : {\r\n        labels : lang_keys,\r\n        datasets:[\r\n            {\r\n                label : \"Language\",\r\n                data: lang_values,\r\n                backgroundColor:  [\"#3e95cd\", \"#8e5ea2\",\"#3cba9f\",\"#e8c3b9\",\"#c45850\", \"#a8e0ff\"],\r\n            }\r\n        ],\r\n    }\r\n    })\r\n\r\n    this.setState({\r\n        location_chartData : {\r\n        labels : loc_keys,\r\n        datasets:[\r\n        {\r\n            label : 'Location',\r\n            data: loc_values,\r\n            backgroundColor: ['#a8e0ff', '#8ee3f5', '#70cad1', '#3e517a', '#b08ea2', '#BBB6DF', '#3e95cd', '#8e5ea2','#3cba9f','#e8c3b9','#c45850', '#a8e0ff']\r\n        }],\r\n        }\r\n    })\r\n\r\n    this.setState({\r\n        date_chartData : {\r\n        labels : date_keys,\r\n        datasets:[\r\n        {\r\n            label : 'Time series',\r\n            data: date_values,\r\n            borderColor: \"#8e5ea2\",\r\n            fill: false,\r\n            backgroundColor: ['#a8e0ff'],\r\n        }]   \r\n        }\r\n        })\r\n\r\n    this.setState({\r\n        sentiment_chartData : {\r\n        labels : sentiment_keys,\r\n        datasets:[\r\n            {\r\n                label : 'Sentiment Analysis',\r\n                data: sentiment_values,\r\n                borderColor: \"#8e5ea2\",\r\n                fill: false,\r\n                backgroundColor: ['#a8e0ff', '#b08ea2', '#BBB6DF'],\r\n            }]   \r\n        }\r\n    })\r\n    }\r\n    \r\n    render() {\r\n      this.Processing();\r\n      const data =[{\"name\":\"test1\"},{\"name\":\"test2\"}];\r\n      const listItems = data.map((d) => <li key={d.name}>{d.name}</li>);\r\n  \r\n      return (\r\n        <div>\r\n        {listItems }\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default News;"]},"metadata":{},"sourceType":"module"}